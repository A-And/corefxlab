<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This is a hack to make sure that the right file is being picked up to be run for tests using the xproj file name. The TestTargetFilename should be set correctly to the name inside project.json, but it is not. -->
  <PropertyGroup>  	
    <TestCommandLine>(set DOTNET_HOME=$(DotnetPath)) &amp; $(DotnetExe) test &quot;$(ProjectJson)&quot; {XunitTraitOptions}</TestCommandLine>
  </PropertyGroup>
  
  <Target Name="Build">
    <!-- This was the only place I could find where this was guaranteed to be executed. The other targets I tried work in some cases (build.cmd) but not others (msbuild). I went with this simple approach for now. -->
    <Exec Command="$(DotnetExe) restore &quot;$(ProjectJson)&quot;" StandardOutputImportance="Low" CustomErrorRegularExpression="^Unable to locate .*" />
    <Exec Command="$(DotnetExe) build &quot;$(ProjectJson)&quot;" />
  </Target>
  
  <Target Name="RunTestsForProject"
          DependsOnTargets="DiscoverTestInputs"
          AfterTargets="CheckTestCategories"
          Inputs="@(RunTestsForProjectInputs)"
          Outputs="$(TestsSuccessfulSemaphore);$(TestPath)%(TestTargetFramework.Folder)\$(XunitResultsFileName)"
          Condition="'$(TestDisabled)'!='true'">

    <PropertyGroup>
      <XunitTraitOptions Condition="'@(RunWithTraits)'!=''">$(XunitTraitOptions) -trait category=@(RunWithTraits, ' -trait category=') </XunitTraitOptions>
      <XunitTraitOptions Condition="'@(RunWithoutTraits)'!=''">$(XunitTraitOptions) -notrait category=@(RunWithoutTraits, ' -notrait category=') </XunitTraitOptions>
    </PropertyGroup>

    <!-- Replace the {XunitTraitOptions} place holder with the actual traits.  We use the place holder
         because code coverage needs to have a bit of the test command line after the traits (it adds ending quotes
         to one of its options).  Simply appending the traits would break code coverage. -->
    <PropertyGroup>
      <TestCommandLine>$(TestCommandLine.Replace('{XunitTraitOptions}', '$(XunitTraitOptions)'))</TestCommandLine>
    </PropertyGroup>
   
    <Exec Command="$(TestCommandLine)"
          ContinueOnError="true">
      <Output PropertyName="TestRunExitCode" TaskParameter="ExitCode" />
    </Exec>

    <Error Condition="'$(TestRunExitCode)' != '0'" Text="One or more tests failed while running tests from '$(MSBuildProjectName)' please check log for details!" />
    <Touch Condition="'$(TestRunExitCode)' == '0'" Files="$(TestsSuccessfulSemaphore)" AlwaysCreate="true" />
  </Target>

  <Target Name="CopyTestToTestDirectory" 
          BeforeTargets="RunTestsForProject">
    <Message Text="Running CopyTestToTestDirectory: $(TestPath)%(TestTargetFramework.Folder)" Importance="High" />

    <MakeDir Directories="$(TestPath)%(TestTargetFramework.Folder)" />    
  </Target>
</Project>