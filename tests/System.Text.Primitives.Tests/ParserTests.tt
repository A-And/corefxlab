<#@ template hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#
	string[] utfEncodings = new string[] {"8", "16"};

	Type[] unsignedTypes = new Type[] { typeof(byte), typeof(ushort), typeof(uint), typeof(ulong) };
	string[] unsignedPrimitives = new string[] { "byte", "ushort", "uint", "ulong" };
	
	Type[] signedTypes = new Type[] { typeof(sbyte), typeof(short), typeof(int), typeof(long) };
	string[] signedPrimitives = new string[] { "sbyte", "short", "int", "long" };

	Type[] floatingPointTypes = new Type[] { typeof(float), typeof(double) };
	string[] floatingPointPrimitives = new string[] { "float", "double" };
	
#>
using System.Runtime.InteropServices;
using System.Text;
using Xunit;

namespace System.Text.Primitives.Tests
{
	public class ParserTests
    {
		private byte[] UtfEncode(string s)
        {
            return Encoding.UTF8.GetBytes(s);
        }
        private byte[] UtfEncode(string s, bool utf16)
        {
            if (utf16)
                return Encoding.Unicode.GetBytes(s);
            else
                return UtfEncode(s);
        }

<#
		for (int i = 0; i < unsignedTypes.Length; i++)
		{
			string capitalizedPrimitive = (char)(unsignedPrimitives[i][0] - 32) + unsignedPrimitives[i].Remove(0,1);

			var minValue = unsignedTypes[i].GetField("MinValue").GetValue(null);
			var maxValue = unsignedTypes[i].GetField("MaxValue").GetValue(null);
			int minValueLength = minValue.ToString().Length;
			int maxValueLength = maxValue.ToString().Length;

			string maxString = maxValue.ToString();

			char overflowChar = (char)(maxString[maxString.Length - 1] + 1);
			string overflowValue = maxString.Remove(maxString.Length - 1) + overflowChar;

			string midValue = maxString.Remove(0,1);
		
			StringBuilder randValueSB = new StringBuilder();
			Random r = new Random(55); // a seed is used so that the same "random" values are always generated
									   // good for test consistency
			foreach (char c in midValue)
			{
				if (c > '5')
				{
					randValueSB.Append((char)(c - r.Next(0,5)));
				}
				else
				{
					randValueSB.Append((char)(c + r.Next(0,4)));
				}
			}
			string randValue = randValueSB.ToString();

#>
		#region <#= unsignedPrimitives[i] #>

<#
			foreach (var utfEncoding in utfEncodings)
			{
			
				int utfByteFactor = (utfEncoding == "8" ? 1 : 2);
#>
		[Theory]
        [InlineData("<#= midValue #>", true, 0, <#= midValue #>, <#= midValue.Length * utfByteFactor #>)]
        [InlineData("blahblahh<#= randValue #>", true, <#= 9 * utfByteFactor #>, <#= randValue #>, <#= randValue.Length * utfByteFactor #>)]
        [InlineData("<#= randValue #>abhced", true, 0, <#= randValue #>, <#= randValue.Length * utfByteFactor #>)]
        [InlineData("<#= minValue #>", true, 0, <#= minValue #>, <#= minValueLength * utfByteFactor #>)] // min value
        [InlineData("<#= maxValue #>", true, 0, <#= maxValue #>, <#= maxValueLength * utfByteFactor #>)] // max value
        [InlineData("I am 1", false, 0, 0, 0)] // invalid character test
        [InlineData(" !", false, 0, 0, 0)] // invalid character test w/ char < '0'
        [InlineData("<#= overflowValue #>", false, 0, 0, 0)] // overflow test
        public unsafe void ParseUtf<#= utfEncoding #>ByteArrayTo<#= capitalizedPrimitive #>(string text, bool expectSuccess, int index, <#= unsignedPrimitives[i] #> expectedValue, int expectedBytesConsumed)
        {
            <#= unsignedPrimitives[i] #> parsedValue;
            int bytesConsumed;
            FormattingData fd = FormattingData.InvariantUtf<#= utfEncoding #>;
            Format.Parsed nf = new Format.Parsed('G');
            bool result = InvariantParser.TryParse(UtfEncode(text, <#= utfEncoding != "8" ? "true" : "false" #>), index, fd, nf, out parsedValue, out bytesConsumed);

            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedBytesConsumed, bytesConsumed);
        }

		[Theory]
        [InlineData("<#= midValue #>", true, 0, <#= midValue #>, <#= midValue.Length * utfByteFactor #>)]
        [InlineData("blahblahh<#= randValue #>", true, <#= 9 * utfByteFactor #>, <#= randValue #>, <#= randValue.Length * utfByteFactor #>)]
        [InlineData("<#= randValue #>abhced", true, 0, <#= randValue #>, <#= randValue.Length * utfByteFactor #>)]
        [InlineData("<#= minValue #>", true, 0, <#= minValue #>, <#= minValueLength * utfByteFactor #>)] // min value
        [InlineData("<#= maxValue #>", true, 0, <#= maxValue #>, <#= maxValueLength * utfByteFactor #>)] // max value
        [InlineData("I am 1", false, 0, 0, 0)] // invalid character test
        [InlineData(" !", false, 0, 0, 0)] // invalid character test w/ char < '0'
        [InlineData("<#= overflowValue #>", false, 0, 0, 0)] // overflow test
        public unsafe void ParseUtf<#= utfEncoding #>ByteStarTo<#= capitalizedPrimitive #>(string text, bool expectSuccess, int index, <#= unsignedPrimitives[i] #> expectedValue, int expectedBytesConsumed)
        {
            <#= unsignedPrimitives[i] #> parsedValue;
            int bytesConsumed;

            byte[] textBytes = UtfEncode(text, <#= utfEncoding != "8" ? "true" : "false" #>);
            FormattingData fd = FormattingData.InvariantUtf<#= utfEncoding #>;
            Format.Parsed nf = new Format.Parsed('G');
            fixed (byte* arrayPointer = textBytes)
            {
                bool result = InvariantParser.TryParse(arrayPointer, index, textBytes.Length, fd, nf, out parsedValue, out bytesConsumed);

                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedBytesConsumed, bytesConsumed);
            }
        }

<#
			}
#>
		#endregion

<#
		}
#>
<#
		for (int i = 0; i < signedTypes.Length; i++)
		{
			string capitalizedPrimitive = (char)(signedPrimitives[i][0] - 32) + signedPrimitives[i].Remove(0,1);

			var minValue = signedTypes[i].GetField("MinValue").GetValue(null);
			var maxValue = signedTypes[i].GetField("MaxValue").GetValue(null);
			int minValueLength = minValue.ToString().Length;
			int maxValueLength = maxValue.ToString().Length;

			string maxString = maxValue.ToString();
			string minString = minValue.ToString();

			char overflowChar = (char)(maxString[maxString.Length - 1] + 1);
			string overflowValue = maxString.Remove(maxString.Length - 1) + overflowChar;
			
			char underflowChar = (char)(minString[minString.Length - 1] + 1);
			string underflowValue = minString.Remove(minString.Length - 1) + underflowChar;

			string midValue = maxString.Remove(0,1);
			string midMinValue = minString.Remove(1,1);
		
			StringBuilder randValueSB = new StringBuilder();
			Random r = new Random(123); // a seed is used so that the same "random" values are always generated
									   // good for test consistency
			foreach (char c in midValue)
			{
				if (c > '5')
				{
					randValueSB.Append((char)(c - r.Next(0,5)));
				}
				else
				{
					randValueSB.Append((char)(c + r.Next(0,4)));
				}
			}
			string randValue = randValueSB.ToString();

#>
		#region <#= signedPrimitives[i] #>

<#
			foreach (var utfEncoding in utfEncodings)
			{
				int utfByteFactor = (utfEncoding == "8" ? 1 : 2);
#>
		[Theory]
        [InlineData("111", true, 0, 111, <#= 3 * utfByteFactor #>)]
        [InlineData("blahblahh<#= midValue #>", true, <#= 9 * utfByteFactor #>, <#= midValue #>, <#= midValue.Length * utfByteFactor #>)]
        [InlineData("<#= randValue #>abcdefg", true, 0, <#= randValue #>, <#= randValue.Length * utfByteFactor #>)]
        [InlineData("The smallest of this type is <#= minValue #>.", true, <#= 29 * utfByteFactor #>, <#= minValue #>, <#= minValueLength * utfByteFactor #>)]
        [InlineData("Letthem<#= midMinValue #>eatcake", true, <#= 7 * utfByteFactor #>, <#= midMinValue #>, <#= midMinValue.Length * utfByteFactor #>)]
        [InlineData("<#= maxValue #>", true, 0, <#= maxValue #>, <#= maxValueLength * utfByteFactor #>)] // max
        [InlineData("<#= minValue #>", true, 0, <#= minValue #>, <#= minValueLength * utfByteFactor #>)] // min
        [InlineData("-A", false, 0, 0, 0)] // invalid character after a sign
        [InlineData("I am 1", false, 0, 0, 0)] // invalid character test
        [InlineData(" !", false, 0, 0, 0)] // invalid character test w/ char < '0'
        [InlineData("<#= overflowValue #>", false, 0, 0, 0)] // positive overflow test
        [InlineData("<#= underflowValue #>", false, 0, 0, 0)] // negative overflow test
        public void ParseUtf<#= utfEncoding #>ByteArrayTo<#= capitalizedPrimitive #>(string text, bool expectSuccess, int index, <#= signedPrimitives[i] #> expectedValue, int expectedBytesConsumed)
        {
            <#= signedPrimitives[i] #> parsedValue;
            int bytesConsumed;
            FormattingData fd = FormattingData.InvariantUtf<#= utfEncoding #>;
            Format.Parsed nf = new Format.Parsed('N');
            bool result = InvariantParser.TryParse(UtfEncode(text, <#= utfEncoding != "8" ? "true" : "false" #>), index, fd, nf, out parsedValue, out bytesConsumed);

            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedBytesConsumed, bytesConsumed);
        }

		[Theory]
        [InlineData("111", true, 0, 111, <#= 3 * utfByteFactor #>)]
        [InlineData("blahblahh<#= midValue #>", true, <#= 9 * utfByteFactor #>, <#= midValue #>, <#= midValue.Length * utfByteFactor #>)]
        [InlineData("<#= randValue #>abcdefg", true, 0, <#= randValue #>, <#= randValue.Length * utfByteFactor #>)]
        [InlineData("The smallest of this type is <#= minValue #>.", true, <#= 29 * utfByteFactor #>, <#= minValue #>, <#= minValueLength * utfByteFactor #>)]
        [InlineData("Letthem<#= midMinValue #>eatcake", true, <#= 7 * utfByteFactor #>, <#= midMinValue #>, <#= midMinValue.Length * utfByteFactor #>)]
        [InlineData("<#= maxValue #>", true, 0, <#= maxValue #>, <#= maxValueLength * utfByteFactor #>)] // max
        [InlineData("<#= minValue #>", true, 0, <#= minValue #>, <#= minValueLength * utfByteFactor #>)] // min
        [InlineData("-A", false, 0, 0, 0)] // invalid character after a sign
        [InlineData("I am 1", false, 0, 0, 0)] // invalid character test
        [InlineData(" !", false, 0, 0, 0)] // invalid character test w/ char < '0'
        [InlineData("<#= overflowValue #>", false, 0, 0, 0)] // positive overflow test
        [InlineData("<#= underflowValue #>", false, 0, 0, 0)] // negative overflow test
        public unsafe void ParseUtf<#= utfEncoding #>ByteStarTo<#= capitalizedPrimitive #>(string text, bool expectSuccess, int index, <#= signedPrimitives[i] #> expectedValue, int expectedBytesConsumed)
        {
            <#= signedPrimitives[i] #> parsedValue;
            int bytesConsumed;
            FormattingData fd = FormattingData.InvariantUtf<#= utfEncoding #>;
            Format.Parsed nf = new Format.Parsed('N');

            byte[] textBytes = UtfEncode(text, <#= utfEncoding != "8" ? "true" : "false" #>);
            fixed (byte* arrayPointer = textBytes)
            {
                bool result = InvariantParser.TryParse(arrayPointer, index, textBytes.Length, fd, nf,
                    out parsedValue, out bytesConsumed);

                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedBytesConsumed, bytesConsumed);
            }
        }

<#
			}
#>
		#endregion

<#
		}
#>
<#
		for (int i = 0; i < floatingPointTypes.Length; i++)
		{
			string capitalizedPrimitive = (char)(floatingPointPrimitives[i][0] - 32) + floatingPointPrimitives[i].Remove(0,1);

			var minValue = floatingPointTypes[i].GetField("MinValue").GetValue(null);
			var maxValue = floatingPointTypes[i].GetField("MaxValue").GetValue(null);
			int minValueLength = minValue.ToString().Length;
			int maxValueLength = maxValue.ToString().Length;

			string maxString = maxValue.ToString();
			int eIndex = maxString.IndexOf('E');
			char oneLess = (char)(maxString[eIndex - 1] - 1);
			maxString = maxString.Remove(eIndex-1,1).Insert(eIndex-1,oneLess.ToString());

			string minString = minValue.ToString();
			eIndex = minString.IndexOf('E');
			oneLess = (char)(minString[eIndex - 1] - 1);
			minString = minString.Remove(eIndex-1,1).Insert(eIndex-1,oneLess.ToString());

			char overflowChar = (char)(maxString[maxString.Length - 1] + 1);
			string overflowValue = maxString.Remove(maxString.Length - 1) + overflowChar;

			string floatString = floatingPointPrimitives[i] == "float" ? "f" : "";

#>
		#region <#= floatingPointPrimitives[i] #>

		[Theory]
        [InlineData(".1728", true, 0, 0.1728<#= floatString #>, 5)]
        [InlineData("blahblahh175.1110", true, 9, 175.1110<#= floatString #>, 8)]
        [InlineData("+98.7abcdefg", true, 0, 98.7<#= floatString #>, 5)]
        [InlineData("A small float is -0.10000000001", true, 17, -0.10000000001<#= floatString #>, 14)]
        [InlineData("1.45e12", true, 0, 1.45e12<#= floatString #>, 7)]
        [InlineData("1E-8", true, 0, 1e-8<#= floatString #>, 4)]
        [InlineData("<#= minString #>", true, 0, <#= minString #><#= floatString #>, <#= minString.Length #>)] // min value
        [InlineData("<#= maxString #>", true, 0, <#= maxString #><#= floatString #>, <#= maxString.Length #>)] // max value
        [InlineData("Infinity", true, 0, <#= floatingPointPrimitives[i] #>.PositiveInfinity, 8)]
        [InlineData("-Infinity", true, 0, <#= floatingPointPrimitives[i] #>.NegativeInfinity, 9)]
        [InlineData("NaN", true, 0, <#= floatingPointPrimitives[i] #>.NaN, 3)]
        [InlineData("I am 1", false, 0, 0, 0)] // invalid character test
        [InlineData("1.6540654e100000", false, 0, 0, 0)] // overflow test
        public void ParseUtf8ByteArrayTo<#= capitalizedPrimitive #>(string text, bool expectSuccess, int index, <#= floatingPointPrimitives[i] #> expectedValue, int expectedBytesConsumed)
        {
            <#= floatingPointPrimitives[i] #> parsedValue;
            int bytesConsumed;
            FormattingData fd = FormattingData.InvariantUtf8;
            Format.Parsed nf = new Format.Parsed('N');
            bool result = InvariantParser.TryParse(UtfEncode(text), index, fd, nf, out parsedValue, out bytesConsumed);

            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedBytesConsumed, bytesConsumed);
        }

		[Theory]
        [InlineData(".1728", true, 0, 0.1728<#= floatString #>, 5)]
        [InlineData("blahblahh175.1110", true, 9, 175.1110<#= floatString #>, 8)]
        [InlineData("+98.7abcdefg", true, 0, 98.7<#= floatString #>, 5)]
        [InlineData("A small float is -0.10000000001", true, 17, -0.10000000001<#= floatString #>, 14)]
        [InlineData("1.45e12", true, 0, 1.45e12<#= floatString #>, 7)]
        [InlineData("1E-8", true, 0, 1e-8<#= floatString #>, 4)]
        [InlineData("<#= minString #>", true, 0, <#= minString #><#= floatString #>, <#= minString.Length #>)] // min value
        [InlineData("<#= maxString #>", true, 0, <#= maxString #><#= floatString #>, <#= maxString.Length #>)] // max value
        [InlineData("Infinity", true, 0, <#= floatingPointPrimitives[i] #>.PositiveInfinity, 8)]
        [InlineData("-Infinity", true, 0, <#= floatingPointPrimitives[i] #>.NegativeInfinity, 9)]
        [InlineData("NaN", true, 0, <#= floatingPointPrimitives[i] #>.NaN, 3)]
        [InlineData("I am 1", false, 0, 0, 0)] // invalid character test
        [InlineData("1.6540654e100000", false, 0, 0, 0)] // overflow test
        public unsafe void ParseUtf8ByteStarTo<#= capitalizedPrimitive #>(string text, bool expectSuccess, int index, <#= floatingPointPrimitives[i] #> expectedValue, int expectedBytesConsumed)
        {
            <#= floatingPointPrimitives[i] #> parsedValue;
            int bytesConsumed;
            FormattingData fd = FormattingData.InvariantUtf8;
            Format.Parsed nf = new Format.Parsed('N');

            byte[] textBytes = UtfEncode(text);
            fixed (byte* arrayPointer = textBytes)
            {
                bool result = InvariantParser.TryParse(arrayPointer, index, textBytes.Length, fd, nf,
                    out parsedValue, out bytesConsumed);

                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedBytesConsumed, bytesConsumed);
            }
        }

		#endregion

<#
		}
#>
		#region bool
		
        [Theory]
        [InlineData("blahblahhTrue", true, 9, true, 4)]
        [InlineData("trueacndasjfh", true, 0, true, 4)]
        [InlineData("LetthemFALSEeatcake", true, 7, false, 5)]
        [InlineData("false", true, 0, false, 5)]
        [InlineData("FaLsE", true, 0, false, 5)]
        [InlineData("0", true, 0, false, 1)]
        [InlineData("1", true, 0, true, 1)]
        [InlineData("-A", false, 0, 0, 0)] // invalid character after a sign
        [InlineData("I am 1", false, 0, 0, 0)] // invalid character test
        [InlineData(" !", false, 0, 0, 0)] // invalid character test w/ char < '0'
        public void ParseUtf8ByteArrayToBool(string text, bool expectSuccess, int index, bool expectedValue, int expectedBytesConsumed)
        {
            bool parsedValue;
            int bytesConsumed;
            FormattingData fd = FormattingData.InvariantUtf8;
            Format.Parsed nf = new Format.Parsed('N');
            bool result = InvariantParser.TryParse(UtfEncode(text), index, fd, nf, out parsedValue, out bytesConsumed);

            Assert.Equal(expectSuccess, result);
            Assert.Equal(expectedValue, parsedValue);
            Assert.Equal(expectedBytesConsumed, bytesConsumed);
        }

        [Theory]
        [InlineData("blahblahhTrue", true, 9, true, 4)]
        [InlineData("trueacndasjfh", true, 0, true, 4)]
        [InlineData("LetthemFALSEeatcake", true, 7, false, 5)]
        [InlineData("false", true, 0, false, 5)]
        [InlineData("FaLsE", true, 0, false, 5)]
        [InlineData("0", true, 0, false, 1)]
        [InlineData("1", true, 0, true, 1)]
        [InlineData("-A", false, 0, 0, 0)] // invalid character after a sign
        [InlineData("I am 1", false, 0, 0, 0)] // invalid character test
        [InlineData(" !", false, 0, 0, 0)] // invalid character test w/ char < '0'
        public unsafe void ParseUtf8ByteStarToBool(string text, bool expectSuccess, int index, bool expectedValue, int expectedBytesConsumed)
        {
            bool parsedValue;
            int bytesConsumed;
            FormattingData fd = FormattingData.InvariantUtf8;
            Format.Parsed nf = new Format.Parsed('N');

            byte[] textBytes = UtfEncode(text);
            fixed (byte* arrayPointer = textBytes)
            {
                bool result = InvariantParser.TryParse(arrayPointer, index, textBytes.Length, fd, nf,
                    out parsedValue, out bytesConsumed);

                Assert.Equal(expectSuccess, result);
                Assert.Equal(expectedValue, parsedValue);
                Assert.Equal(expectedBytesConsumed, bytesConsumed);
            }
        }

        #endregion
	}
}